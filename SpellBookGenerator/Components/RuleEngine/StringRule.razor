@using Shared
@using SpellBookGenerator.Core.RuleEngine
@using SpellBookGenerator.Core.Spells
@typeparam TSpell where TSpell: Shared.ISpell
@typeparam TDisplay where TDisplay: ISpellDisplay<TSpell>

<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
    <MudSelect
        DisableUnderLine
        Dense
        Margin="Margin.Dense"
        Variant="Variant.Filled"
        T="@(Func<TDisplay, string>)"
        Style="min-width: 9rem"
        ValueChanged="@OnSelectionChanged"
        >
            @foreach (var prop in QueryableProperties)
            {
                <MudSelectItem T="@(Func<TDisplay, string>)" Value="prop.Selector">
                    <MudText Align="Align.Center">@prop.Name</MudText>
                </MudSelectItem>
            }
    </MudSelect>
    <MudSelect 
        T="bool"
        ValueChanged="@(() => RuleBuilder.Not())"
        DisableUnderLine
        Dense
        Margin="Margin.Dense" 
        Variant="Variant.Filled">
        <MudSelectItem T="bool" Value="@false">
            <MudText Align="Align.Center">
                SHOULD
            </MudText>
        </MudSelectItem>
        <MudSelectItem T="bool" Value="@true">
            <MudText Align="Align.Center">
                SHOULD NOT
            </MudText>
        </MudSelectItem>
    </MudSelect>
    <MudSelect
        DisableUnderLine
        Dense
        Margin="Margin.Dense"
        Variant="Variant.Filled"
        T="@(Func<string, StringRuleBuilder<TDisplay>>)"
        ValueChanged="@ComparisonMethodChanged">
        <MudSelectItem T="@(Func<string, StringRuleBuilder<TDisplay>>)" Value="@RuleBuilder.Contain">
            <MudText Align="Align.Center">CONTAIN</MudText>
        </MudSelectItem>
        <MudSelectItem T="@(Func<string, StringRuleBuilder<TDisplay>>)" Value="@RuleBuilder.Equal">
            <MudText Align="Align.Center">EQUAL</MudText>
        </MudSelectItem>
        <MudSelectItem T="@(Func<string, StringRuleBuilder<TDisplay>>)" Value="@RuleBuilder.Match">
            <MudText Align="Align.Center">   
                <MudTooltip Text="This uses regular expressions">
                    MATCH
                </MudTooltip>
            </MudText>
        </MudSelectItem>
    </MudSelect>
    <MudTextField Margin="Margin.Dense" T="string" Variant="Variant.Filled" DisableUnderLine ValueChanged="@ComparisonValueChanged"/>
    @ChildContent
</MudStack>


@code {
    private string _comparisonValue = "";
    private Func<string, StringRuleBuilder<TDisplay>>? _comparisonMethod;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter, EditorRequired] 
    public required StringRuleBuilder<TDisplay> RuleBuilder { get; set; }

    [Parameter, EditorRequired] 
    public required IEnumerable<QueryableInfo<TDisplay, string>> QueryableProperties { get; set; }


    private Task UpdateBuilder()
    {
        _comparisonMethod?.Invoke(_comparisonValue);
        return Task.CompletedTask;
    }

    private void ComparisonMethodChanged(Func<string, StringRuleBuilder<TDisplay>> newMethod)
    {
        _comparisonMethod = newMethod;
        UpdateBuilder();
    }

    private void ComparisonValueChanged(string newValue)
    {
        _comparisonValue = newValue;
        UpdateBuilder();
    }
    
    private void OnSelectionChanged(Func<TDisplay, string> newSelector)
    {
        RuleBuilder.RuleFor(newSelector);
        UpdateBuilder();
    }

}