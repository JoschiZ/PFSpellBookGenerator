@page "/"
@using System.Collections.ObjectModel
@using FuzzySharp
@using Shared
@inject SpellService SpellService
@inject ISnackbar SnackBar
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavManager

<div style="display: flex; margin-top: 2rem">
    <MudToggleGroup Vertical SelectionMode="SelectionMode.MultiSelection" @bind-Values="@SpellService.DataToLoad" Style="margin-right: 2rem">
        @foreach (var classList in Enum.GetValues<Classes>().OrderBy(classes => classes.ToString()))
        {
            <MudToggleItem Value="classList"/>
        }
    </MudToggleGroup>
    <div>
        <MudGrid Justify="Justify.SpaceEvenly" Spacing="3" Style="margin-bottom: 2rem">
            <MudCard Style="width: 40%">
                <MudCardHeader>
                    <MudText Typo="Typo.h3" Color="Color.Primary">Mass Import</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField AutoGrow Lines="5" Variant="Variant.Outlined"  @bind-Value="@_massImport"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="@(() => CheckSpells(_massImport))" Variant="Variant.Filled" Color="Color.Primary">Add Spells</MudButton>
                </MudCardActions>
            </MudCard>
            <MudCard Style="width: 40%">
                <MudCardHeader>
                    <MudText Typo="Typo.h3" Color="Color.Primary">Spell Search</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudAutocomplete
                        T="Spell"
                        SearchFunc="@SearchSpell"
                        MinCharacters="3"
                        ResetValueOnEmptyText
                        CoerceText
                        ToStringFunc="spell => spell.Name"
                        ValueChanged="@OnSpellSelected"
                        ShowProgressIndicator/>
                </MudCardContent>
            </MudCard>
        </MudGrid>


        <MudCard>
            <MudCardContent>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@GoToPrint">Print</MudButton>
                <MudDataGrid @ref="@_spellGrid" Groupable GroupExpanded="false" Filterable Items="_selectedSpells">
                    <Columns>
                        <HierarchyColumn/>
                        <PropertyColumn Property="@(spell => spell.Magus)" Grouping GroupBy="spell => spell.Magus">
                            <GroupTemplate>
                                <span style="font-weight: bold">Grade: @context.Grouping.Key <MudChip Color="Color.Info" Variant="Variant.Outlined">total: @context.Grouping.Count()</MudChip></span>
                            </GroupTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="spell => spell.Name"/>
                        <TemplateColumn>
                            <CellTemplate>
                                @context.Item?.School <EmptyHelper Content="@context.Item?.SubSchool">(@context.Item?.SubSchool)</EmptyHelper> <EmptyHelper Content="@context.Item?.Descriptor">[@context.Item?.Descriptor]</EmptyHelper>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn>
                            <CellTemplate>
                                @context.Item?.Range <EmptyHelper Content="@context.Item?.Targets">(@context.Item?.Targets)</EmptyHelper>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="arg => arg.CastingTime"/>
                        <PropertyColumn Property="spell => spell.Duration"/>
                        <TemplateColumn>
                            <CellTemplate>
                                @context.Item?.SavingThrow <EmptyHelper Content="@context.Item?.SpellResistance">(SR: @context.Item?.SpellResistance)</EmptyHelper>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="arg => arg.Components"/>
                        <PropertyColumn Property="arg => arg.ShortDescription"/>
                        <TemplateColumn>
                            <CellTemplate>
                                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => UnselectSpell(context.Item)">Remove</MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <ChildRowContent>
                        @((MarkupString) context.Item.DescriptionFormatted)
                    </ChildRowContent>
                </MudDataGrid>
            </MudCardContent>
            <MudCardActions>
                <MudButton OnClick="@(_selectedSpells.Clear)" Variant="Variant.Filled" Color="Color.Error">Clear List</MudButton>
            </MudCardActions>
        </MudCard>
    </div>
</div>




@code
{
    private string _massImport = "";
    private readonly ObservableCollection<Spell> _selectedSpells = [];
    private MudDataGrid<Spell>? _spellGrid;

    protected override async void OnInitialized()
    {
        var spells = await LocalStorage.GetItemAsync<List<Spell>>("spells");
        if (spells is null)
        {
            return;
        }
        
        foreach (var spell in spells)
        {
            _selectedSpells.Add(spell);
        }
    }

    private Task UnselectSpell(Spell? spell)
    {
        if (spell is null)
        {
            return Task.CompletedTask; 
        }
        _selectedSpells.Remove(spell);
        return Task.CompletedTask;
    }

    private async Task CheckSpells(string spellNames)
    {
        var spells = await SpellService.GetSpells();

        var singleSpellNames = spellNames
            .Split("\n")
            .Select(s => s.Replace("\"", ""))
            .Select(s => s.Trim());

        foreach (var spellName in singleSpellNames)
        {
            var spell = spells.FirstOrDefault(spell => Fuzz.Ratio(spellName, spell.Name) >= 90);

            if (spell is null)
            {
                SnackBar.Add($"Could not find: {spellName}", Severity.Warning);
                continue;
            }

            if (!_selectedSpells.Contains(spell))
            {
                _selectedSpells.Add(spell);
            }
        }

        if (_spellGrid is not null)
        {
            await _spellGrid.SetSortAsync(nameof(Spell.Magus), SortDirection.Ascending, x => x.Magus, new MudBlazor.Utilities.NaturalComparer());
        }
    }

    private async Task GoToPrint()
    {
        await LocalStorage.SetItemAsync("spells", _selectedSpells);
        NavManager.NavigateTo("print");
    }

    private async Task<IEnumerable<Spell>> SearchSpell(string spellName)
    {
        var spells = await SpellService.GetSpells();
        return spells.Where(spell => Fuzz.Ratio(spellName, spell.Name) > 70).Take(5).OrderBy(spell => spell.Name);
    }

    private Task OnSpellSelected(Spell? spell)
    {
        if (spell is not null)
        {
            _selectedSpells.Add(spell);
        }
        
        return Task.CompletedTask;
    }
}


