@page "/"
@using System.Collections.ObjectModel
@using System.Text.RegularExpressions
@using FuzzySharp
@using Shared
@inject SpellService SpellService
@inject ISnackbar SnackBar
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavManager


<MudText Color="Color.Primary" Typo="Typo.h2">Pathfinder Spell Book Generator</MudText>

<MudCard Style="margin-bottom: 2rem">
    <MudCardContent>
        <MudText>
            To select spell you need to select a class first. This class will be used to determine the grade of your spells.
            If you select spells that aren't on your spell list, or choose "AllSpells" as your class, the lowest available grade will be chosen.
            Changing your selected class will only affect newly added spells!
            You can change all details on every spell in the preview table down below.
        </MudText>
        <MudStack Row>
            <MudSelect Variant="Variant.Filled" HelperText="Select a Class" T="@CharacterClass" @bind-Value="@_mainSpellList" SelectedValuesChanged="@OnMainSelectionChanged">
                @foreach (var classList in Enum.GetValues<CharacterClass>())
                {
                    <MudSelectItem T="CharacterClass" Value="classList"></MudSelectItem>
                }
            </MudSelect>

            <MudSelect Variant="Variant.Filled" HelperText="Spell data to load" @ref="_spellListToLoadSelect" MultiSelection @bind-SelectedValues="@_selectedSpellLists" Style="margin-right: 2rem">
                @foreach (var classList in Enum.GetValues<CharacterClass>().OrderBy(classes => classes.ToString()))
                {
                    <MudSelectItem Value="classList"/>
                }
            </MudSelect>
        </MudStack>

    </MudCardContent>
</MudCard>


@if (_selectedSpellLists.Any())
{
        <MudGrid Justify="Justify.SpaceEvenly" Spacing="3" Style="margin-bottom: 2rem">
            <MudCard Style="width: 40%">
                <MudCardHeader>
                    <MudText Typo="Typo.h3" Color="Color.Primary">Mass Import</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField 
                        Placeholder
                        =
                        "Light
Fireball
Wish" 
                        AutoGrow Lines="5" MaxLines="10" Variant="Variant.Outlined" @bind-Value="@_massImport"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="@(() => AddSpellsByName(_massImport))" Variant="Variant.Filled" Color="Color.Primary">Add Spells</MudButton>
                </MudCardActions>
            </MudCard>
            <MudCard Style="width: 40%">
                <MudCardHeader>
                    <MudText Typo="Typo.h3" Color="Color.Primary">Spell Search</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Justify="Justify.SpaceBetween">
                        <MudAutocomplete
                            T="Spell"
                            SearchFuncWithCancel="@SearchSpell"
                            MinCharacters="3"
                            ResetValueOnEmptyText
                            CoerceText
                            ToStringFunc="spell => spell.Name"
                            ValueChanged="@OnSpellSelected"
                            ShowProgressIndicator/>
                        
                        <div>
                            <MudText>You can also add all spells that match some custom expression</MudText>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _spellFilterAddDialogOpen = true)">Add spells using expression</MudButton>
                        </div>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudGrid>
}

<MudCard>
    <MudCardContent>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@GoToPrint">Print</MudButton>
        <SpellGrid @ref="@_spellGrid" Spells="_selectedSpells"/>
    </MudCardContent>
    <MudCardActions>
        <MudButton OnClick="@(_selectedSpells.Clear)" Variant="Variant.Filled" Color="Color.Error">Clear List</MudButton>
    </MudCardActions>
</MudCard>


<MudDialog @bind-IsVisible="@_spellFilterAddDialogOpen" Options="@_spellFilterAddDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6" Color="Color.Primary">Filter spell add</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@_spellFilterAddModel">
            <MudStack Row AlignItems="AlignItems.Baseline">
                <MudNumericField @bind-Value="@_spellFilterAddModel.MinimumSpellLevel" Variant="Variant.Filled" Min="0" Max="9" HelperText="Min. Spell Level"/>
                -
                <MudNumericField @bind-Value="@_spellFilterAddModel.MaximumSpellLevel" Variant="Variant.Filled" Min="0" Max="9" HelperText="Max. Spell Level"/>
            </MudStack>
            <MudStack Row AlignItems="AlignItems.Baseline">
                <MudTextField @bind-Value="@_spellFilterAddModel.FilterExpression" Variant="Variant.Filled" HelperText="Filter Expression"/>
                <MudTooltip Text="This filter accepts regex expressions.">
                    <MudIcon Icon="@Icons.Material.Filled.Help"/>
                </MudTooltip>
            </MudStack>
            <MudToggleGroup @bind-Values="@_spellFilterAddModel.SearchFields" T="SearchField" SelectionMode="SelectionMode.MultiSelection" CheckMark Color="Color.Primary">
                @foreach (var field in Enum.GetValues<SearchField>())
                {
                    <MudToggleItem Text="@(field.ToStringFast())" Value="@field" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox"/>
                }
            </MudToggleGroup>
        </MudForm>
        @if (_filterAddFoundSpells.Any())
        {
            <MudPaper>
                <SpellGrid Spells="_filterAddFoundSpells"></SpellGrid>
            </MudPaper>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => _spellFilterAddDialogOpen = false)">Cancel</MudButton>
        <MudTooltip ShowOnHover="@(!_spellFilterAddModel.SearchFields.Any())" Text="Please select at least one text to search in">
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => FilterSpells(_spellFilterAddModel))" Disabled="@(!_spellFilterAddModel.SearchFields.Any())">Search Spells</MudButton>
        </MudTooltip>
        @if(_filterAddFoundSpells.Any())
        {
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@AddFoundFilteredSpells">Add Spells</MudButton>
        }
    </DialogActions>
</MudDialog>


@code
{
    private string _massImport = "";
    private readonly ObservableCollection<SelectedSpell> _selectedSpells = [];
    private CharacterClass _mainSpellList;
    private MudSelect<CharacterClass>? _spellListToLoadSelect;

    private DialogOptions _spellFilterAddDialogOptions = new()
    {
        CloseButton = true,
        CloseOnEscapeKey = true,
        MaxWidth = MaxWidth.ExtraLarge
    };
    private bool _spellFilterAddDialogOpen;
    private SpellFilterModel _spellFilterAddModel = new();
    private ObservableCollection<SelectedSpell> _filterAddFoundSpells = [];
    private IEnumerable<CharacterClass> _selectedSpellLists = [];
    private SpellGrid? _spellGrid;

    protected override async void OnInitialized()
    {
        var spells = await LocalStorage.GetItemAsync<List<SelectedSpell>>("spells");
        if (spells is null)
        {
            return;
        }
        
        foreach (var spell in spells)
        {
            _selectedSpells.Add(spell);
        }
    }

    private async Task AddSpellsByName(string spellNames)
    {
        var spells = (await SpellService.GetSpellsAsync(_selectedSpellLists)).ToList();

        var singleSpellNames = spellNames
            .Split("\n")
            .Select(s => s.Replace("\"", ""))
            .Select(s => s.Trim());
        
        foreach (var spellName in singleSpellNames)
        {
            var spell = spells.FirstOrDefault(spell => Fuzz.Ratio(spellName, spell.Name) >= 90);

            if (spell is null)
            {
                SnackBar.Add($"Could not find: {spellName}", Severity.Warning);
                continue;
            }
            
            _selectedSpells.Add(new SelectedSpell(spell, _mainSpellList));
        }

        if (_spellGrid is not null)
        {
            await _spellGrid.SortByLevel();
        }
    }

    private async Task GoToPrint()
    {
        await LocalStorage.SetItemAsync("spells", _selectedSpells);
        var returnUri = NavManager.ToBaseRelativePath(NavManager.Uri);
        NavManager.NavigateTo($"print?returnPath={returnUri}");
    }

    private async Task<IEnumerable<Spell>> SearchSpell(string spellName, CancellationToken ctx)
    {
        var spells = await SpellService.GetSpellsAsync(_selectedSpellLists, ctx);
        return spells.Where(spell => Fuzz.Ratio(spellName, spell.Name) > 70).Take(5).OrderBy(spell => spell.Name);
    }

    private Task OnSpellSelected(Spell? spell)
    {
        if (spell is not null)
        {
            _selectedSpells.Add(new SelectedSpell(spell, _mainSpellList));
        }
        
        return Task.CompletedTask;
    }


    private Task OnMainSelectionChanged(IEnumerable<CharacterClass> arg)
    {
        return _spellListToLoadSelect?.SelectOption(arg.First()) ?? Task.CompletedTask;
    }

    private async Task FilterSpells(SpellFilterModel filter)
    {
        var pattern = new Regex(filter.FilterExpression);

        var spells = await SpellService.GetSpellsAsync(_selectedSpellLists);
        var spellQuery = spells
            .Select(s => new SelectedSpell(s, _mainSpellList))
            .Where(spell => spell.CurrentSpellLevel >= filter.MinimumSpellLevel && spell.CurrentSpellLevel <= filter.MaximumSpellLevel)
            .Where(selectedSpell => 
                
                filter.SearchFields.Select(field => 
                    GetField(field, selectedSpell.Spell))
                    .Any(fieldContent => pattern.IsMatch(fieldContent)
                ))
            .OrderBy(s => s.CurrentSpellLevel);

        

        _filterAddFoundSpells = new ObservableCollection<SelectedSpell>(spellQuery.ToList());
    }

    private static string GetField(SearchField searchField, Spell spell)
    {
        return searchField switch
        {
            SearchField.Name => spell.Name,
            SearchField.ShortDescription => spell.ShortDescription,
            SearchField.FullDescription => spell.DescriptionFormatted,
            SearchField.Range => spell.Range,
            _ => throw new ArgumentOutOfRangeException(nameof(searchField), searchField, null)
        };
    }

    private Task AddFoundFilteredSpells()
    {
        foreach (var foundSpell in _filterAddFoundSpells)
        {
            _selectedSpells.Add(foundSpell);
        }
        
        _filterAddFoundSpells.Clear();
        _spellFilterAddModel = new SpellFilterModel();
        _spellFilterAddDialogOpen = false;
        return Task.CompletedTask;
    }
}


